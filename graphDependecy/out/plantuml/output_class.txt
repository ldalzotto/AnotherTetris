@startuml
scale 3840*2160
interface ITetrisElementGenerator{ 
private IPhysicsGeneration iPhysicsGeneration;
private IGraphicsGeneration iGraphicsGeneration;
private IShapeDebugger iShapeDebugger;
TetrisElement createTetrisElement(List<Vector2> worldPositions, float tetrisGridWidth)
GridLimits createTetrisGrid(Rectangle bottomPos, Rectangle leftPos, Rectangle rightPos)
}
class TetrisElementDomainContants

interface IPhysicsGeneration{ 
private static Vector2 BLOCK_VELOCITY = new Vector2(0, -100);
private ITetrisPhysicsContactGeneration iTetrisPhysicsContactGeneration;
Body createTetrisElementBody(List<Vector2> worldPositions, float blockWidht, float blocHeight)
Body createGridLimitRectangle(Vector2 worldPosition, float width, float height)
}
interface ITetrisGrid{ 
private ITetrisPhysicsWorld iTetrisPhysicsWorld;
private IGraphicContext iGraphicContext;
private ITetElementToPositionnedSprite iTetElementToPositionnedSprite;
private List<TetrisElement> tetrisElements = new ArrayList<>();
public BottomLine bottomLine;
boolean addTetrisElement(TetrisElement tetrisElement)
void addBottomLine(BottomLine bottomLine)
void renderAndUpdate(float delta)
BottomLine getBottomLine()
boolean isInField(TetrisElement tetrisElement)
}
interface ITetrisPhysicsContactGeneration{ 
void createAndRegisterBlockContact()
}
class TetrisGridContants

class AnotherTetris

interface IGridInitializer{ 
private ITetrisElementGenerator iTetrisElementGenerator;
private ITetrisGrid iTetrisGrid;
public void initializeGrid()
}
interface IPhysicsDebugger{ 
private static String KEY_DELIMITER = "=";
private Map<String, String> keysFromFile = new HashMap<>();
private File configurationFile;
boolean isDebugEnabled()
}
interface IElementSpawn{ 
void spawnElement()
}
interface IGraphicContext{ 
void render(List<Sprite> sprites)
SpriteBatch getSpriteBatch()
}
interface ITetElementToPositionnedSprite{ 
private IShapeDebugger iShapeDebugger;
List<Sprite> getSpritesFromTetrisElement(TetrisElement tetrisElement)
}
interface ITetrisRewardDetection{ 
private Boolean generated = false;
void checkRewardAndSpawn()
}
interface IShapeDebugger{ 
private IPhysicsDebugger iPhysicsDebugger;
private ShapeRenderer shapeRenderer;
private List<Event> drawEvents = new ArrayList<>();
public void render(Camera camera, float delta)
public boolean pushDrawEvent(Function<ShapeRenderer, Void> event, float time)
}
interface IElementPlayerManager{ 
private IGraphicContext iGraphicContext;
private ITetrisGrid iTetrisGrid;
private TetrisElement tetrisElement;
public void render(float delta)
void pushElementToGrid()
void setPlayerElement(TetrisElement playerElement)
TetrisElement getPlauerElement()
}
interface ITetrisPhysicsWorld{ 
void initWorld()
void updatePhysics(float delta)
Body registerBody(BodyDef bodyDef)
void registerContactListener(ContactListener contactListener)
void render(Camera camera)
}
interface IGraphicsGeneration{ 
List<Sprite> createTetrisBlockSprite(List<Vector2> worldPositions, float width)
Sprite createBakgroundBlockSprite(Vector2 worldPosition)
}
"AnotherTetris" --> "ITetrisGrid"
"ITetrisGrid" --> "ITetrisPhysicsWorld"
"ITetrisPhysicsWorld" --> "IPhysicsDebugger"
"ITetrisGrid" --> "IGraphicContext"
"ITetrisGrid" --> "TetrisElementDomainContants"
"ITetrisGrid" --> "TetrisGridContants"
"ITetrisGrid" --> "ITetElementToPositionnedSprite"
"ITetElementToPositionnedSprite" --> "TetrisElementDomainContants"
"ITetElementToPositionnedSprite" --> "IShapeDebugger"
"IShapeDebugger" --> "IPhysicsDebugger"
"AnotherTetris" --> "ITetrisPhysicsWorld"
"AnotherTetris" --> "IGraphicContext"
"AnotherTetris" --> "ITetrisRewardDetection"
"ITetrisRewardDetection" --> "ITetrisGrid"
"ITetrisRewardDetection" --> "IElementSpawn"
"IElementSpawn" --> "ITetrisGrid"
"IElementSpawn" --> "TetrisElementDomainContants"
"IElementSpawn" --> "ITetrisElementGenerator"
"ITetrisElementGenerator" --> "TetrisElementDomainContants"
"ITetrisElementGenerator" --> "IGraphicsGeneration"
"ITetrisElementGenerator" --> "IPhysicsGeneration"
"IPhysicsGeneration" --> "ITetrisPhysicsWorld"
"IPhysicsGeneration" --> "ITetrisPhysicsContactGeneration"
"ITetrisPhysicsContactGeneration" --> "TetrisElementDomainContants"
"ITetrisPhysicsContactGeneration" --> "ITetrisPhysicsWorld"
"ITetrisPhysicsContactGeneration" --> "ITetrisGrid"
"ITetrisPhysicsContactGeneration" --> "IElementPlayerManager"
"IElementPlayerManager" --> "ITetrisGrid"
"IElementPlayerManager" --> "TetrisElementDomainContants"
"IElementPlayerManager" --> "IGraphicContext"
"ITetrisElementGenerator" --> "TetrisGridContants"
"ITetrisElementGenerator" --> "IShapeDebugger"
"IElementSpawn" --> "IElementPlayerManager"
"AnotherTetris" --> "IGridInitializer"
"IGridInitializer" --> "ITetrisGrid"
"IGridInitializer" --> "ITetrisElementGenerator"
"IGridInitializer" --> "TetrisGridContants"
"AnotherTetris" --> "IElementPlayerManager"
"AnotherTetris" --> "IShapeDebugger"
@enduml
